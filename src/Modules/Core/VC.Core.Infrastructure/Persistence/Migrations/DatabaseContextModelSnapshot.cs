// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VC.Core.Employees;
using VC.Core.Infrastructure.Persistence;

#nullable disable

namespace VC.Core.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("core")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VC.Core.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Specialisation")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Employees", "core");
                });

            modelBuilder.Entity("VC.Core.Employees.WorkSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<IReadOnlyCollection<WorkScheduleItem>>("Items")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TenantId");

                    b.ToTable("WorkSchedules", "core");
                });

            modelBuilder.Entity("VC.Core.Services.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", "core");
                });

            modelBuilder.Entity("VC.Core.Services.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Resources", "core");
                });

            modelBuilder.Entity("VC.Core.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("BaseDuration")
                        .HasColumnType("bigint");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<Guid[]>("RequiredResources")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsActive");

                    b.HasIndex("TenantId");

                    b.ToTable("Services", "core");
                });

            modelBuilder.Entity("VC.Core.Employees.WorkSchedule", b =>
                {
                    b.OwnsMany("VC.Core.Employees.WorkingHourException", "Exceptions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("EndTime")
                                .HasColumnType("time without time zone");

                            b1.Property<bool>("IsDayOff")
                                .HasColumnType("boolean");

                            b1.Property<TimeOnly?>("StartTime")
                                .HasColumnType("time without time zone");

                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("WorkScheduleId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("Date");

                            b1.HasIndex("EmployeeId");

                            b1.HasIndex("TenantId");

                            b1.HasIndex("WorkScheduleId");

                            b1.HasIndex("EmployeeId", "Date")
                                .IsUnique();

                            b1.ToTable("WorkingHourException", "core", t =>
                                {
                                    t.HasCheckConstraint("CK_WorkingHourException_DayOffTimes", "\"IsDayOff\" = false AND \"StartTime\" IS NOT NULL AND \"EndTime\" IS NOT NULL OR \r\n              \"IsDayOff\" = true AND \"StartTime\" IS NULL AND \"EndTime\" IS NULL");

                                    t.HasCheckConstraint("CK_WorkingHourException_TimeRange", "\"IsDayOff\" = true OR \"StartTime\" < \"EndTime\"");
                                });

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleId");
                        });

                    b.Navigation("Exceptions");
                });

            modelBuilder.Entity("VC.Core.Services.Category", b =>
                {
                    b.HasOne("VC.Core.Services.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("VC.Core.Services.Service", b =>
                {
                    b.OwnsMany("VC.Core.Services.EmployeeAssignment", "EmployeeAssignments", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long>("Duration")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric");

                            b1.HasKey("ServiceId", "Id");

                            b1.HasIndex("EmployeeId");

                            b1.ToTable("EmployeeAssignments", "core");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.Navigation("EmployeeAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
