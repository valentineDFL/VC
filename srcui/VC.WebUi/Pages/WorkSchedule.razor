@page "/employees/{employeeId:guid}/work-schedule"
@using VC.WebUi.Services
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h3>График работы для сотрудника @EmployeeId</h3>

@if (_loading)
{
    <p><em>Загрузка...</em></p>
}
else if (_schedule == null)
{
    <div class="alert alert-warning">График не найден.</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>День недели</th>
                <th>Начало</th>
                <th>Конец</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _schedule.Items)
            {
                <tr>
                    <td>@GetDayOfWeekName(item.DayOfWeek)</td>
                    <td>@item.StartTime</td>
                    <td>@item.EndTime</td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>Добавить/Обновить график</h4>

<EditForm Model="@_workScheduleRequest" OnValidSubmit="@SaveWorkSchedule">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Исключения (необязательно)</label>
        <InputCheckbox @bind-Value="_addException" class="form-check-input" />
        <span class="ms-2">Добавить исключение</span>
    </div>

    @if (_addException)
    {
        <div class="row mb-3">
            <div class="col-md-4">
                <label>Дата</label>
                <InputDate @bind-Value="_exception.Date" class="form-control" />
            </div>
            <div class="col-md-4">
                <label>Выходной?</label>
                <InputCheckbox @bind-Value="_exception.IsDayOff" class="form-check-input" />
            </div>
            <div class="col-md-4">
                <label>Время начала</label>
                <InputText @bind-Value="_exception.StartTime" class="form-control" />
            </div>
            <div class="col-md-4 mt-2">
                <label>Время окончания</label>
                <InputText @bind-Value="_exception.EndTime" class="form-control" />
            </div>
        </div>
    }

    <div class="mb-3">
        <label>Расписание на неделю</label>
        @for (int i = 0; i < _workScheduleRequest.Items.Count; i++)
        {
            var item = _workScheduleRequest.Items[i];
            <div class="row mb-2 align-items-center">
                <div class="col-md-4">
                    <InputSelect @bind-Value="item.DayOfWeek" class="form-select">
                        @for (int day = 1; day <= 7; day++)
                        {
                            <option value="@day">@GetDayOfWeekName(day)</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <InputText @bind-Value="item.StartTime" class="form-control" placeholder="09:00" />
                </div>
                <div class="col-md-3">
                    <InputText @bind-Value="item.EndTime" class="form-control" placeholder="18:00" />
                </div>
                <div class="col-md-2">
                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(i)">Удалить</button>
                </div>
            </div>
        }
        <button class="btn btn-secondary btn-sm mt-2" @onclick="AddNewItem">+ Добавить день</button>
    </div>

    <button type="submit" class="btn btn-success">Сохранить график</button>
    <button class="btn btn-secondary ms-2" @onclick="ResetForm">Сбросить</button>
</EditForm>

@code {
    [Parameter]
    public Guid EmployeeId { get; set; }

    private bool _loading = true;
    private WorkScheduleDetailsDto? _schedule;

    private CreateWorkScheduleRequest _workScheduleRequest = new();
    private AddWorkingHourExceptionRequest _exception = new();
    private bool _addException = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchedule();
        ResetForm();
    }

    private async Task LoadSchedule()
    {
        _schedule = await ApiService.GetEmployeeWorkSchedule(EmployeeId);
        _loading = false;
    }

    private async Task SaveWorkSchedule()
    {
        if (_addException)
        {
            var result = await ApiService.AddWorkScheduleExceptionAsync(EmployeeId, _exception);
            if (!result.IsSuccess)
            {
                foreach (var error in result.Errors ?? new List<IError>())
                {
                    Console.WriteLine($"Ошибка исключения: {error.Message}");
                }
            }
        }

        var response = await ApiService.CreateWorkScheduleAsync(EmployeeId, _workScheduleRequest);
        if (response.IsSuccess)
        {
            await LoadSchedule();
        }
        else
        {
            foreach (var error in response.Errors ?? new List<IError>())
            {
                Console.WriteLine($"Ошибка сохранения графика: {error.Message}");
            }
        }
    }

    private void ResetForm()
    {
        _workScheduleRequest = new CreateWorkScheduleRequest
        {
            Items = new List<WorkScheduleItemDto>()
        };
        _exception = new AddWorkingHourExceptionRequest();
        _addException = false;
    }

    private void AddNewItem()
    {
        _workScheduleRequest.Items.Add(new WorkScheduleItemDto());
    }

    private void RemoveItem(int index)
    {
        if (index >= 0 && index < _workScheduleRequest.Items.Count)
        {
            _workScheduleRequest.Items.RemoveAt(index);
        }
    }

    private string GetDayOfWeekName(int dayOfWeek)
    {
        return dayOfWeek switch
        {
            1 => "Понедельник",
            2 => "Вторник",
            3 => "Среда",
            4 => "Четверг",
            5 => "Пятница",
            6 => "Суббота",
            7 => "Воскресенье",
            _ => "Неизвестный день"
        };
    }
}