@page "/employees"
@using VC.WebUi.Services
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h3>Сотрудники</h3>

@if (_loading)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>ФИО</th>
                <th>Специализация</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in _employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.FullName</td>
                    <td>@employee.Specialisation</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => ShowSchedule(employee.Id)">График</button>
                        <button class="btn btn-secondary btn-sm ms-2" @onclick="() => ShowAvailableSlots(employee.Id)">Слоты</button>
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteEmployee(employee.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (_showCreateForm)
{
    <h4>Добавить сотрудника</h4>
    <EditForm Model="@_newEmployee" OnValidSubmit="@CreateEmployee">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label>ФИО</label>
            <InputText @bind-Value="_newEmployee.FullName" class="form-control" />
            <ValidationMessage For="@(() => _newEmployee.FullName)" />
        </div>

        <div class="form-group mb-2">
            <label>Специализация (необязательно)</label>
            <InputText @bind-Value="_newEmployee.Specialisation" class="form-control" />
        </div>

        <button type="submit" class="btn btn-success">Сохранить</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="ResetForm">Отмена</button>
    </EditForm>
}

<button class="btn btn-primary mt-3" @onclick="ShowCreateForm">Добавить сотрудника</button>




@code {
    private bool _loading = true;
    private bool _showCreateForm = false;

    private List<EmployeeDto> _employees = new();
    private CreateEmployeeParams _newEmployee = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        _employees = await ApiService.GetEmployeesAsync();
        _loading = false;
    }

    private void ShowCreateForm()
    {
        _newEmployee = new();
        _showCreateForm = true;
    }

    private void ResetForm()
    {
        _newEmployee = new();
        _showCreateForm = false;
    }

    private async Task CreateEmployee()
    {
        var result = await ApiService.CreateEmployeeAsync(_newEmployee);
        if (result.IsSuccess)
        {
            await LoadEmployees();
            ResetForm();
        }
        else
        {
            foreach (var error in result.Errors ?? new List<IError>())
            {
                Console.WriteLine($"Ошибка: {error.Message}");
            }
        }
    }

    private async Task DeleteEmployee(Guid id)
    {
       
        await LoadEmployees();
        
    }

    private void ShowSchedule(Guid employeeId)
    {
        NavigationManager.NavigateTo($"/employees/{employeeId}/work-schedule");
    }

    private void ShowAvailableSlots(Guid employeeId)
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        NavigationManager.NavigateTo($"/employees/{employeeId}/available-slots?date={today}");
    }
}