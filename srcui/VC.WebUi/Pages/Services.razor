@page "/services"
@using VC.WebUi.Services
@using VC.WebUi.Shared
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<PageHeader Title="Услуги"
            Subtitle="Настройка и управление услугами"
            PrimaryColor="#FF4500"
            SecondaryColor="#FFA500"
            OnBack="() => NavigationManager.NavigateTo(_backUrl)" />

<div class="container mt-3">
    <!-- Поиск -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text" id="search-addon"><i class="bi bi-search"></i></span>
                <InputText @bind-Value="_searchQuery" placeholder="Поиск по названию или описанию..." class="form-control" />
            </div>
        </div>
        <div class="col-md-6 d-flex justify-content-end">
            <button class="btn btn-outline-secondary" @onclick="ResetSearch">
                <i class="bi bi-arrow-counterclockwise me-1"></i>Сбросить
            </button>
        </div>
    </div>

    <!-- Кнопка добавления -->
    <div class="d-flex justify-content-end mb-4">
        <button class="btn btn-primary" @onclick="ShowCreateForm">
            <i class="bi bi-plus-circle me-2"></i>Добавить услугу
        </button>
    </div>

    <!-- Форма создания услуги -->
    @if (_showCreateForm)
    {
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <h5 class="card-title">@(_showEditForm ? "Редактировать услугу" : "Добавить новую услугу")</h5>
                <EditForm Model="@_newService" OnValidSubmit="@CreateService">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Название</label>
                        <InputText @bind-Value="_newService.Title" class="form-control" />
                        <ValidationMessage For="@(() => _newService.Title)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Цена</label>
                        <InputNumber @bind-Value="_newService.BasePrice" class="form-control" />
                        <ValidationMessage For="@(() => _newService.BasePrice)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Длительность (формат: hh:mm:ss)</label>
                        <InputText @bind-Value="_newService.BaseDuration" class="form-control" />
                        <ValidationMessage For="@(() => _newService.BaseDuration)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Описание</label>
                        <InputText @bind-Value="_newService.Description" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-success me-2">
                        <i class="bi bi-check-circle me-1"></i>Сохранить
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="ResetForm">
                        <i class="bi bi-x-circle me-1"></i>Отмена
                    </button>
                </EditForm>
            </div>
        </div>
    }

    <!-- Список услуг -->
    <div class="row g-4">
        @if (_loading)
        {
            <div class="text-center my-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Загрузка...</span>
                </div>
            </div>
        }
        else if (!_filteredServices.Any())
        {
            <div class="alert alert-info">Нет доступных услуг по вашему запросу.</div>
        }
        else
        {
            @foreach (var service in _filteredServices)
            {
                <div class="col-md-4">
                    <div class="card shadow-sm h-100 hover-card">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@service.Title</h5>
                            <p class="card-text text-muted">
                                ID: <strong>@service.Id</strong><br />
                                Цена: <strong>@service.BasePrice ₽</strong><br />
                                Длительность: <strong>@service.BaseDuration</strong><br />
                                @(string.IsNullOrEmpty(service.Description) ? "" : "Описание: " + service.Description)
                            </p>
                            <div class="mt-auto d-flex gap-2">
                                <button class="btn btn-warning btn-sm flex-grow-1" @onclick="() => ShowEditForm(service)">
                                    <i class="bi bi-pencil-square"></i> Изменить
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => Delete(service.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Ошибки -->
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger mt-4">
            @_errorMessage
        </div>
    }
</div>

<style>
    .hover-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .hover-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }

    .card-title {
        margin-bottom: 0.5rem;
    }
</style>

@code {
    private string _backUrl = "/";
    private bool _loading = true;
    private bool _showCreateForm = false;
    private bool _showEditForm = false;
    private string? _errorMessage;
    private string? _searchQuery;

    private List<ServiceDetailsDto> _services = new();
    private List<ServiceDetailsDto> _filteredServices = new();

    private CreateServiceRequest _newService = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServices();
    }

    private async Task LoadServices()
    {
        _loading = true;
        _services = await ApiService.GetAllServicesAsync();
        FilterServices();
        _loading = false;
    }

    private void FilterServices()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            _filteredServices = _services.ToList();
        }
        else
        {
            var query = _searchQuery.ToLower();
            _filteredServices = _services.Where(s =>
                s.Title.ToLower().Contains(query) ||
                (s.Description?.ToLower().Contains(query) ?? false)).ToList();
        }
    }

    private void ResetSearch()
    {
        _searchQuery = "";
        FilterServices();
    }

    private void ShowCreateForm()
    {
        _newService = new();
        _showCreateForm = true;
        _showEditForm = false;
    }

    private void ShowEditForm(ServiceDetailsDto service)
    {
        _newService = new CreateServiceRequest
        {
            Title = service.Title,
            BasePrice = service.BasePrice,
            BaseDuration = service.BaseDuration,
            Description = service.Description,
            CategoryId = service.Category?.Id,
            RequiredResources = service.RequiredResources.Select(r => r.Id).ToList(),
            EmployeeAssignments = service.EmployeeAssignments.Select(ea => new EmployeeAssignmentDto2
            {
                EmployeeId = ea.EmployeeId,
                Price = ea.Price,
                Duration = ea.Duration
            }).ToList()
        };
        _showCreateForm = true;
        _showEditForm = true;
    }

    private async Task CreateService()
    {
        ResultOfGuid result;

        if (_showEditForm)
        {
            // TODO: реализуйте UpdateServiceAsync в ApiService
            // var updateResult = await ApiService.UpdateServiceAsync(_newService.Id, _newService);
        }
        else
        {
            result = await ApiService.CreateServiceAsync(_newService);
        }

        result = await ApiService.CreateServiceAsync(_newService);

        if (result.IsSuccess)
        {
            await LoadServices();
            ResetForm();
        }
        else
        {
            _errorMessage = result.Errors?.FirstOrDefault()?.Message ?? "Ошибка при создании";
        }
    }

    private void ResetForm()
    {
        _newService = new();
        _showCreateForm = false;
        _showEditForm = false;
        _errorMessage = null;
    }

    private async Task Delete(Guid id)
    {
        var result = await ApiService.DeleteServiceAsync(id);
        if (result.IsSuccess)
        {
            await LoadServices();
        }
        else
        {
            _errorMessage = result.Errors?.FirstOrDefault()?.Message ?? "Ошибка удаления";
        }
    }
}